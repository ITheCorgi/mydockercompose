version: "3"

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "8000:8000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=
    ports:
      - 8081:8081
    depends_on:
      - redis
  
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports: 
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    
  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "9093:9093"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafka-ui
    ports:
      - "9004:9004"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      SERVER_PORT: 9004
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.1
    container_name: elastic-search
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:8.1.1
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
      ELASTICSEARCH_HOSTS: http://elastic:9200
    depends_on:
      - elastic

  kraken_designer:
    image: devopsfaith/krakendesigner:latest
    container_name: krakend-designer
    ports:
      - 8787:80

  krakend_ce:
    image: devopsfaith/krakend:latest
    container_name: krakend-api-gateway
    volumes:
      - krakend:/etc/krakend
    ports:
      - "1234:1234"
      - "8080:8080"
      - "8090:8090"
    # command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
    depends_on:
      - jaeger
      
volumes:
  portainer-data:
  redis-data:
  elastic-data:
  krakend: